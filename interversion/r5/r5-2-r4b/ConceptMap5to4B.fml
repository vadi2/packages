/// url = 'http://hl7.org/fhir/StructureMap/ConceptMap5to4B'
/// name = 'ConceptMap5to4B'
/// title = 'FML Conversion for ConceptMap: R5 to R4B'

conceptmap "ConceptMapGroupUnmappedMode" {
  prefix s = "http://hl7.org/fhir/conceptmap-unmapped-mode"
  prefix t = "http://hl7.org/fhir/4.3/conceptmap-unmapped-mode"

  s:"use-source-code" - t:"use-source-code"
  s:"fixed" - t:"fixed"
  s:"other-map" - t:"other-map"
}

conceptmap "ConceptMapRelationship" {
  prefix s = "http://hl7.org/fhir/concept-map-relationship"
  prefix t = "http://hl7.org/fhir/4.3/concept-map-relationship"

  s:"related-to" - t:"related-to"
  s:"equivalent" - t:"equivalent"
  s:"source-is-narrower-than-target" - t:"source-is-narrower-than-target"
  s:"source-is-broader-than-target" - t:"source-is-broader-than-target"
  s:"not-related-to" - t:"not-related-to"
}

conceptmap "ConceptMapmapAttributeType" {
  prefix s = "http://hl7.org/fhir/conceptmap-attribute-type"
  prefix t = "http://hl7.org/fhir/4.3/conceptmap-attribute-type"

  s:"code" - t:"code"
  s:"Coding" - t:"Coding"
  s:"string" - t:"string"
  s:"boolean" - t:"boolean"
  s:"Quantity" - t:"Quantity"
}

conceptmap "PropertyType" {
  prefix s = "http://hl7.org/fhir/conceptmap-property-type"
  prefix t = "http://hl7.org/fhir/4.3/conceptmap-property-type"

  s:"Coding" - t:"Coding"
  s:"string" - t:"string"
  s:"integer" - t:"integer"
  s:"boolean" - t:"boolean"
  s:"dateTime" - t:"dateTime"
  s:"decimal" - t:"decimal"
  s:"code" - t:"code"
}

conceptmap "PublicationStatus" {
  prefix s = "http://hl7.org/fhir/publication-status"
  prefix t = "http://hl7.org/fhir/4.3/publication-status"

  s:"draft" - t:"draft"
  s:"active" - t:"active"
  s:"retired" - t:"retired"
  s:"unknown" - t:"unknown"
}

conceptmap "UnmappedConceptMapRelationship" {
  prefix s = "http://hl7.org/fhir/concept-map-relationship"
  prefix t = "http://hl7.org/fhir/4.3/concept-map-relationship"

  s:"related-to" - t:"related-to"
  s:"equivalent" - t:"equivalent"
  s:"source-is-narrower-than-target" - t:"source-is-narrower-than-target"
  s:"source-is-broader-than-target" - t:"source-is-broader-than-target"
  s:"not-related-to" - t:"not-related-to"
}

uses "http://hl7.org/fhir/StructureDefinition/ConceptMap" alias ConceptMapR5 as source
uses "http://hl7.org/fhir/4.3/StructureDefinition/ConceptMap" alias ConceptMapR4B as target

imports "http://hl7.org/fhir/StructureMap/*5to4B"

group ConceptMap(source src : ConceptMapR5, target tgt : ConceptMapR4B) extends DomainResource <<type+>> {
  src.url -> tgt.url;
  src.identifier -> tgt.identifier;
  src.version -> tgt.version;
//  src.versionAlgorithm : string -> tgt.versionAlgorithm;
//  src.versionAlgorithm : Coding -> tgt.versionAlgorithm;
  src.name -> tgt.name;
  src.title -> tgt.title;
  src.status as v -> tgt.status = translate(v, '#PublicationStatus', 'code');
  src.experimental -> tgt.experimental;
  src.date -> tgt.date;
  src.publisher -> tgt.publisher;
  src.contact -> tgt.contact;
  src.description -> tgt.description;
  src.useContext -> tgt.useContext;
  src.jurisdiction -> tgt.jurisdiction;
  src.purpose -> tgt.purpose;
  src.copyright -> tgt.copyright;
//  src.copyrightLabel -> tgt.copyrightLabel;
//  src.approvalDate -> tgt.approvalDate;
//  src.lastReviewDate -> tgt.lastReviewDate;
//  src.effectivePeriod -> tgt.effectivePeriod;
//  src.topic -> tgt.topic;
//  src.author -> tgt.author;
//  src.editor -> tgt.editor;
//  src.reviewer -> tgt.reviewer;
//  src.endorser -> tgt.endorser;
//  src.relatedArtifact -> tgt.relatedArtifact;
  src.property as s -> tgt.property as t then ConceptMapProperty(s,t);
  src.additionalAttribute as s -> tgt.additionalAttribute as t then ConceptMapAdditionalAttribute(s,t);
  src.sourceScope : uri -> tgt.source;
  src.sourceScope : canonical -> tgt.source;
  src.targetScope : uri -> tgt.target;
  src.targetScope : canonical -> tgt.target;
  src.group as s -> tgt.group as t then ConceptMapGroup(s,t);
}

group ConceptMapProperty(source src, target tgt) extends BackboneElement {
  src.code -> tgt.code;
  src.uri -> tgt.uri;
  src.description -> tgt.description;
  src.type as v -> tgt.type = translate(v, '#PropertyType', 'code');
  src.system -> tgt.system;
}

group ConceptMapAdditionalAttribute(source src, target tgt) extends BackboneElement {
  src.code -> tgt.code;
  src.uri -> tgt.uri;
  src.description -> tgt.description;
  src.type as v -> tgt.type = translate(v, '#ConceptMapmapAttributeType', 'code');
}

group ConceptMapGroup(source src, target tgt) extends BackboneElement {
  src.source -> tgt.source;
  src.target -> tgt.target;
  src.element as s -> tgt.element as t then ConceptMapGroupElement(s,t);
  src.unmapped as s -> tgt.unmapped as t then ConceptMapGroupUnmapped(s,t);
}

group ConceptMapGroupElement(source src, target tgt) extends BackboneElement {
  src.code -> tgt.code;
  src.display -> tgt.display;
  src.valueSet -> tgt.valueSet;
  src.noMap -> tgt.noMap;
  src.target as s -> tgt.target as t then ConceptMapGroupElementTarget(s,t);
}

group ConceptMapGroupElementTarget(source src, target tgt) extends BackboneElement {
  src.code -> tgt.code;
  src.display -> tgt.display;
  src.valueSet -> tgt.valueSet;
  src.relationship as v -> tgt.relationship = translate(v, '#ConceptMapRelationship', 'code');
  src.comment -> tgt.comment;
  src.property as s -> tgt.property as t then ConceptMapGroupElementTargetProperty(s,t);
  src.dependsOn as s -> tgt.dependsOn as t then ConceptMapGroupElementTargetDependsOn(s,t);
}

group ConceptMapGroupElementTargetProperty(source src, target tgt) extends BackboneElement {
  src.code -> tgt.code;
  src.value : Coding -> tgt.value;
  src.value : string -> tgt.value;
  src.value : integer -> tgt.value;
  src.value : boolean -> tgt.value;
  src.value : dateTime -> tgt.value;
  src.value : decimal -> tgt.value;
  src.value : code -> tgt.value;
}

group ConceptMapGroupElementTargetDependsOn(source src, target tgt) extends BackboneElement {
  src.attribute -> tgt.attribute;
  src.value : code -> tgt.value;
  src.value : Coding -> tgt.value;
  src.value : string -> tgt.value;
  src.value : boolean -> tgt.value;
  src.value : Quantity -> tgt.value;
  src.valueSet -> tgt.valueSet;
}

group ConceptMapGroupUnmapped(source src, target tgt) extends BackboneElement {
  src.mode as v -> tgt.mode = translate(v, '#ConceptMapGroupUnmappedMode', 'code');
  src.code -> tgt.code;
  src.display -> tgt.display;
  src.valueSet -> tgt.valueSet;
  src.relationship as v -> tgt.relationship = translate(v, '#UnmappedConceptMapRelationship', 'code');
  src.otherMap -> tgt.otherMap;
}

